{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Smoother Smoother is a statistical tool for computing non-parametric distributions by optimizing a constrained smoothing function. Why smoother? We often want to estimate a distribution given limited information, such as its mean and standard deviation. Rather than impose parametric assumptions, smoother uses non-parametric techniques to infer an entire distribution given limited information. Installation $ pip install smoother Quickstart from smoother import Smoother, MomentConstraint import matplotlib.pyplot as plt import numpy as np # fit a smooth distribution with given mean and standard deviation lower_bound, upper_bound = -3, 3 mean_const = MomentConstraint(0, degree=1) std_const = MomentConstraint(1, degree=2, type_='central', norm=True) smoother = Smoother().fit(lower_bound, upper_bound, [mean_const, std_const]) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a normal distribution. Citation @software{bowen2020smoother, author = {Dillon Bowen}, title = {Smoother: a statistical package for computing smooth, non-parametric distributions}, url = {https://dsbowen.github.io/smoother/}, date = {2020-08-06}, } License Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"Home"},{"location":"#smoother","text":"Smoother is a statistical tool for computing non-parametric distributions by optimizing a constrained smoothing function.","title":"Smoother"},{"location":"#why-smoother","text":"We often want to estimate a distribution given limited information, such as its mean and standard deviation. Rather than impose parametric assumptions, smoother uses non-parametric techniques to infer an entire distribution given limited information.","title":"Why smoother?"},{"location":"#installation","text":"$ pip install smoother","title":"Installation"},{"location":"#quickstart","text":"from smoother import Smoother, MomentConstraint import matplotlib.pyplot as plt import numpy as np # fit a smooth distribution with given mean and standard deviation lower_bound, upper_bound = -3, 3 mean_const = MomentConstraint(0, degree=1) std_const = MomentConstraint(1, degree=2, type_='central', norm=True) smoother = Smoother().fit(lower_bound, upper_bound, [mean_const, std_const]) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a normal distribution.","title":"Quickstart"},{"location":"#citation","text":"@software{bowen2020smoother, author = {Dillon Bowen}, title = {Smoother: a statistical package for computing smooth, non-parametric distributions}, url = {https://dsbowen.github.io/smoother/}, date = {2020-08-06}, }","title":"Citation"},{"location":"#license","text":"Users must cite this package in any publications which use it. It is licensed with the MIT License .","title":"License"},{"location":"contribute/","text":"Contribute I welcome constributions to this project, especially: Additional objective (smoothing) functions Additional constraints Default weight computation for objectives and constraints work well for distributions with ranges from 1 to 1e6. However, the default weights on do not work well for distributions with very small or large ranges. Solutions to this problem are welcome.","title":"Contribute"},{"location":"contribute/#contribute","text":"I welcome constributions to this project, especially: Additional objective (smoothing) functions Additional constraints Default weight computation for objectives and constraints work well for distributions with ranges from 1 to 1e6. However, the default weights on do not work well for distributions with very small or large ranges. Solutions to this problem are welcome.","title":"Contribute"},{"location":"examples/","text":"Examples Find the full code for these examples here . Moments constraints In this example, we compute a smooth distribution given moments constraints. from smoother import Smoother, MomentConstraint import matplotlib.pyplot as plt import numpy as np # fit a smooth distribution with given mean and standard deviation lower_bound, upper_bound = -3, 3 mean_const = MomentConstraint(0, degree=1) std_const = MomentConstraint(1, degree=2, type_='central', norm=True) smoother = Smoother().fit(lower_bound, upper_bound, [mean_const, std_const]) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a standard normal distribution. We begin by defining the lower and upper bounds of the distribution along with two moments constraints. The first constrains the mean (the first moment, degree=1 ), to be 0. The second constrains the standard deviation (the norm of the second central moment) to be 1. By default, Smoother computes a maximum entropy distribution subject to the upper and lower bound and constraints. Masses constraints In this example, we compute a smooth distribution given masses constraints. from smoother import Smoother, DerivativeObjective, MassConstraint import numpy as np import matplotlib.pyplot as plt # fit a smooth distribution given masses constraints lower_bound, upper_bound = -3, 3 p25_const = MassConstraint(lower_bound, -.67, mass=.25) p50_const = MassConstraint(-.67, 0, mass=.25) p75_const = MassConstraint(0, .67, mass=.25) p100_const = MassConstraint(.67, upper_bound, mass=.25) smoother = Smoother().fit( lower_bound, upper_bound, [p25_const, p50_const, p75_const, p100_const], objective=DerivativeObjective(1) ) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a standard normal distribution. We begin by defining the upper and lower bounds of the distribution, along with masses constraints. Masses constraints require that a certain mass of the distribution be within a given range. For example, MassConstraint(-.67, 0, mass=.25) means that 25% of the mass of the distribution must be between -.67 and 0. The DerivativeObjective is a different smoothing function from the default, which maximizes entropy. The derivative objective smoothing function minimizes the mean square of a derivative; in this case the first derivative, since we passed in 1 to the constructor.","title":"Examples"},{"location":"examples/#examples","text":"Find the full code for these examples here .","title":"Examples"},{"location":"examples/#moments-constraints","text":"In this example, we compute a smooth distribution given moments constraints. from smoother import Smoother, MomentConstraint import matplotlib.pyplot as plt import numpy as np # fit a smooth distribution with given mean and standard deviation lower_bound, upper_bound = -3, 3 mean_const = MomentConstraint(0, degree=1) std_const = MomentConstraint(1, degree=2, type_='central', norm=True) smoother = Smoother().fit(lower_bound, upper_bound, [mean_const, std_const]) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a standard normal distribution. We begin by defining the lower and upper bounds of the distribution along with two moments constraints. The first constrains the mean (the first moment, degree=1 ), to be 0. The second constrains the standard deviation (the norm of the second central moment) to be 1. By default, Smoother computes a maximum entropy distribution subject to the upper and lower bound and constraints.","title":"Moments constraints"},{"location":"examples/#masses-constraints","text":"In this example, we compute a smooth distribution given masses constraints. from smoother import Smoother, DerivativeObjective, MassConstraint import numpy as np import matplotlib.pyplot as plt # fit a smooth distribution given masses constraints lower_bound, upper_bound = -3, 3 p25_const = MassConstraint(lower_bound, -.67, mass=.25) p50_const = MassConstraint(-.67, 0, mass=.25) p75_const = MassConstraint(0, .67, mass=.25) p100_const = MassConstraint(.67, upper_bound, mass=.25) smoother = Smoother().fit( lower_bound, upper_bound, [p25_const, p50_const, p75_const, p100_const], objective=DerivativeObjective(1) ) # plot smoother pdf x = np.linspace(lower_bound, upper_bound, num=100) f_x = np.array([smoother.pdf(x_i) for x_i in x]) plt.plot(x, f_x) The result should look like a standard normal distribution. We begin by defining the upper and lower bounds of the distribution, along with masses constraints. Masses constraints require that a certain mass of the distribution be within a given range. For example, MassConstraint(-.67, 0, mass=.25) means that 25% of the mass of the distribution must be between -.67 and 0. The DerivativeObjective is a different smoothing function from the default, which maximizes entropy. The derivative objective smoothing function minimizes the mean square of a derivative; in this case the first derivative, since we passed in 1 to the constructor.","title":"Masses constraints"},{"location":"smoother/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Smoother smoother. Smoother class smoother. Smoother ( lb=0, ub=1, num=50 ) [source] The smoother computes a distribution by maximizing an objective function (i.e. a smoothness function) given constraints. Attributes: x : np.array A linearly spaced ( self.num ,) array of points between the lower and upper bounds of the distribution. f_x : np.array The probability density function of self.x . F_x : np.array The cumulative distribution function of self.x . Methods mean ( self ) [source] Returns: mean : float var ( self ) [source] Returns: variance : float std ( self ) [source] Returns: standard deviation : float median ( self ) [source] Returns: median : float entropy ( self ) [source] Returns: entropy : float pdf ( self, x ) [source] Parameters: x : float Returns: pdf(x) : float Probability density function of x . cdf ( self, x ) [source] Parameters: x : float Returns: cdf(x) : float between 0. and 1. Cumulative distribution function of x . ppf ( self, q ) [source] Parameters: q : float between 0. and 1. Quantile. Returns: ppf(q) : float Percent point function; inverse of self.cdf . sf ( self, x ) [source] Parameters: x : float Returns: sf(x) : float between 0. and 1. Survival function; 1-self.cdf . isf ( self, q ) [source] Parameters: q : float between 0. and 1. Returns: isf(x) : float Inverse survival function. moment ( self, degree=1, type_='raw', norm=False ) [source] Parameters: degree : int, default=1 The degree of the moment, e.g. first (mean), second (var). type_ : str, default='raw' Type of moment; 'raw' , 'central' , or 'standardized' . norm : bool, default=False Indicates whether to return the norm of the moment. If True , return moment**(1/degree) . Returns: moment : float fit ( self, lb, ub, constraints, objective=lambda self: self.entropy(), num=50 ) [source] Parameters: lb : float Lower bound of the distribution. ub : float Upper bound of the distribution. constraints : list of callables Constraints take in a Smoother and return a float. Lower values indicate that the constraints are satisfied. objective : The objective or smoothing function. The objective function takes a Smoother and returns a float. This objective function is maximized subject to constraints. By default, it maximizes entropy. num : int, default=50 Number of points on the distribution used for approximation. Returns: self : dump ( self ) [source] Returns: state_dict : dict JSON dump of the state dictionary. load ( state_dict ) [source] Parameters: state_dict : dict Output of Smoother.dump . Returns: smoother : Smoother Smoother with the specified state dictionary.","title":"Smoother"},{"location":"smoother/#smoother","text":"","title":"Smoother"},{"location":"smoother/#smoothersmoother","text":"class smoother. Smoother ( lb=0, ub=1, num=50 ) [source] The smoother computes a distribution by maximizing an objective function (i.e. a smoothness function) given constraints. Attributes: x : np.array A linearly spaced ( self.num ,) array of points between the lower and upper bounds of the distribution. f_x : np.array The probability density function of self.x . F_x : np.array The cumulative distribution function of self.x .","title":"smoother.Smoother"},{"location":"smoother/#methods","text":"mean ( self ) [source] Returns: mean : float var ( self ) [source] Returns: variance : float std ( self ) [source] Returns: standard deviation : float median ( self ) [source] Returns: median : float entropy ( self ) [source] Returns: entropy : float pdf ( self, x ) [source] Parameters: x : float Returns: pdf(x) : float Probability density function of x . cdf ( self, x ) [source] Parameters: x : float Returns: cdf(x) : float between 0. and 1. Cumulative distribution function of x . ppf ( self, q ) [source] Parameters: q : float between 0. and 1. Quantile. Returns: ppf(q) : float Percent point function; inverse of self.cdf . sf ( self, x ) [source] Parameters: x : float Returns: sf(x) : float between 0. and 1. Survival function; 1-self.cdf . isf ( self, q ) [source] Parameters: q : float between 0. and 1. Returns: isf(x) : float Inverse survival function. moment ( self, degree=1, type_='raw', norm=False ) [source] Parameters: degree : int, default=1 The degree of the moment, e.g. first (mean), second (var). type_ : str, default='raw' Type of moment; 'raw' , 'central' , or 'standardized' . norm : bool, default=False Indicates whether to return the norm of the moment. If True , return moment**(1/degree) . Returns: moment : float fit ( self, lb, ub, constraints, objective=lambda self: self.entropy(), num=50 ) [source] Parameters: lb : float Lower bound of the distribution. ub : float Upper bound of the distribution. constraints : list of callables Constraints take in a Smoother and return a float. Lower values indicate that the constraints are satisfied. objective : The objective or smoothing function. The objective function takes a Smoother and returns a float. This objective function is maximized subject to constraints. By default, it maximizes entropy. num : int, default=50 Number of points on the distribution used for approximation. Returns: self : dump ( self ) [source] Returns: state_dict : dict JSON dump of the state dictionary. load ( state_dict ) [source] Parameters: state_dict : dict Output of Smoother.dump . Returns: smoother : Smoother Smoother with the specified state dictionary.","title":"Methods"},{"location":"utils/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Objective functions and constraints smoother. DerivativeObjective class smoother. DerivativeObjective ( d=1, weight=None ) [source] A Smoother objective function which minimizes the sum of a square derivative. Parameters and attributes: d : int, default=1 e.g. 1 means first derivative, 2 means second derivative. Methods __call__ ( self, smoother ) [source] Parameters: smoother : Smoother The smoother to which this objective function applies. Returns: value : float Approximate mean square derivative over all points of the distribution. smoother. MassConstraint class smoother. MassConstraint ( lb, ub, mass, weight=None ) [source] A Smoother constraint that forces a certain amount of probability mass to be within a given range. Parameters and attributes: lb : float Lower bound of the range within which the probability mass must be. ub : float Upper bound of the range within which the probability mass must be. mass : float between 0. and 1. Amount of probability mass between lb and ub . weight : float or None, default=None Weight to place on the constraint. If None the weight will be set automatically when the constraint is called based on the smoother. Methods __call__ ( self, smoother ) [source] Parameters: smoother : Smoother Smoother to which this constraint applies. Returns: loss : float smoother. MomentConstraint class smoother. MomentConstraint ( value, degree, type_='raw', norm=False, weight=None ) [source] A Smoother constraint that forces a moment condition to hold. Parameters and attributes: value : float The target value of the moment. degree : int The degree of the moment; e.g. the 1st moment is the mean. type_ : str, default='raw' Type of moment: 'raw' , 'central' or 'standardized' . norm : bool, default=False Indicates whether to apply a norm to the moment. weight : float or None, default=None Weight to place on the constraint. If None the weight will be set automatically when the constraint is called based on the smoother. Methods __call__ ( self, smoother ) [source] Parameters: smoother : Smoother Smoother to which this constraint applies. Returns: loss : float","title":"Objectives and constraints"},{"location":"utils/#objective-functions-and-constraints","text":"","title":"Objective functions and constraints"},{"location":"utils/#smootherderivativeobjective","text":"class smoother. DerivativeObjective ( d=1, weight=None ) [source] A Smoother objective function which minimizes the sum of a square derivative. Parameters and attributes: d : int, default=1 e.g. 1 means first derivative, 2 means second derivative.","title":"smoother.DerivativeObjective"},{"location":"utils/#methods","text":"__call__ ( self, smoother ) [source] Parameters: smoother : Smoother The smoother to which this objective function applies. Returns: value : float Approximate mean square derivative over all points of the distribution.","title":"Methods"},{"location":"utils/#smoothermassconstraint","text":"class smoother. MassConstraint ( lb, ub, mass, weight=None ) [source] A Smoother constraint that forces a certain amount of probability mass to be within a given range. Parameters and attributes: lb : float Lower bound of the range within which the probability mass must be. ub : float Upper bound of the range within which the probability mass must be. mass : float between 0. and 1. Amount of probability mass between lb and ub . weight : float or None, default=None Weight to place on the constraint. If None the weight will be set automatically when the constraint is called based on the smoother.","title":"smoother.MassConstraint"},{"location":"utils/#methods_1","text":"__call__ ( self, smoother ) [source] Parameters: smoother : Smoother Smoother to which this constraint applies. Returns: loss : float","title":"Methods"},{"location":"utils/#smoothermomentconstraint","text":"class smoother. MomentConstraint ( value, degree, type_='raw', norm=False, weight=None ) [source] A Smoother constraint that forces a moment condition to hold. Parameters and attributes: value : float The target value of the moment. degree : int The degree of the moment; e.g. the 1st moment is the mean. type_ : str, default='raw' Type of moment: 'raw' , 'central' or 'standardized' . norm : bool, default=False Indicates whether to apply a norm to the moment. weight : float or None, default=None Weight to place on the constraint. If None the weight will be set automatically when the constraint is called based on the smoother.","title":"smoother.MomentConstraint"},{"location":"utils/#methods_2","text":"__call__ ( self, smoother ) [source] Parameters: smoother : Smoother Smoother to which this constraint applies. Returns: loss : float","title":"Methods"}]}